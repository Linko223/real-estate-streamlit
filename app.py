import streamlit as st
import pandas as pd
import os
import hashlib

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data")
USERS_FILE = os.path.join(DATA_DIR, "users.csv")
PREFS_FILE = os.path.join(DATA_DIR, "preferences.csv")
APARTMENTS_FILE = os.path.join(DATA_DIR, "krisha_cleaned.csv")
BUSINESS_FILE = os.path.join(DATA_DIR, "business_data_updated.csv")
HOUSES_FILE = os.path.join(DATA_DIR, "doma_data_updated.csv")

# ====== –•–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ======
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def load_users():
    if os.path.exists(USERS_FILE):
        return pd.read_csv(USERS_FILE)
    else:
        return pd.DataFrame(columns=["UserID", "Login", "PasswordHash"])

def save_user(login, password):
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    users = load_users()
    if login in users["Login"].values:
        return False
    new_id = users["UserID"].max() + 1 if not users.empty else 1
    new_user = {"UserID": new_id, "Login": login, "PasswordHash": hash_password(password)}
    users = pd.concat([users, pd.DataFrame([new_user])], ignore_index=True)
    users.to_csv(USERS_FILE, index=False)
    return True

def authenticate(login, password):
    users = load_users()
    user_row = users[(users["Login"] == login) & (users["PasswordHash"] == hash_password(password))]
    return user_row.iloc[0]["UserID"] if not user_row.empty else None

# ====== –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø ======
def load_preferences():
    if os.path.exists(PREFS_FILE):
        return pd.read_csv(PREFS_FILE)
    return pd.DataFrame(columns=["UserID", "Income", "PreferredFloor", "Rooms", "District", "MinArea", "MaxArea"])

def save_preferences(user_id, prefs_dict):
    prefs_df = load_preferences()
    prefs_df = prefs_df[prefs_df["UserID"] != user_id]
    prefs_dict["UserID"] = user_id
    prefs_df = pd.concat([prefs_df, pd.DataFrame([prefs_dict])], ignore_index=True)
    prefs_df.to_csv(PREFS_FILE, index=False)

def get_user_preferences(user_id):
    prefs_df = load_preferences()
    row = prefs_df[prefs_df["UserID"] == user_id]
    return row.iloc[0] if not row.empty else None

# ====== –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê ======
def login_page():
    st.markdown("<h2 style='text-align: center;'>üîê –í—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>", unsafe_allow_html=True)
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with tab1:
        login = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.button("–í–æ–π—Ç–∏"):
            user_id = authenticate(login, password)
            if user_id:
                st.session_state.logged_in = True
                st.session_state.user_id = user_id
                st.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

    with tab2:
        new_login = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω")
        new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            if save_user(new_login, new_password):
                st.success("–£—Å–ø–µ—à–Ω–æ! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
            else:
                st.warning("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# ====== –ü–û–ò–°–ö –ü–û –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø–ú ======
def filter_properties(df, prefs):
    return df[
        (df["Rooms"] == prefs["Rooms"]) &
        (df["Area"] >= prefs["MinArea"]) &
        (df["Area"] <= prefs["MaxArea"]) &
        (df["Price"] <= prefs["Income"] * 100) &
        (abs(df["Floor"] - prefs["PreferredFloor"]) <= 1)
    ]

# ====== –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ======
def main_app():
    st.sidebar.header("üë§ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    st.sidebar.write(f"User ID: {st.session_state.user_id}")
    if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
        st.session_state.logged_in = False
        st.session_state.user_id = None
        st.experimental_rerun()

    st.markdown("<h1 style='color: #3B82F6;'>üèòÔ∏è –ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º</h1>", unsafe_allow_html=True)

    prefs = get_user_preferences(st.session_state.user_id)
    st.subheader("üîß –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:")

    with st.form("preferences_form"):
        income = st.number_input("–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)", min_value=0)
        preferred_floor = st.slider("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂", 1, 25, 3)
        rooms = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", [1, 2, 3, 4, 5, 6])
        min_area = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)", min_value=20.0, value=50.0)
        max_area = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)", min_value=20.0, value=100.0)

        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å")
        if submitted:
            prefs_data = {
                "Income": income,
                "PreferredFloor": preferred_floor,
                "Rooms": rooms,
                "District": "NA",  # –¥–ª—è –±–∏–∑–Ω–µ—Å/–¥–æ–º–æ–≤ –Ω–µ—Ç —Ä–∞–π–æ–Ω–∞
                "MinArea": min_area,
                "MaxArea": max_area
            }
            save_preferences(st.session_state.user_id, prefs_data)
            st.success("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞:")

    tabs = st.tabs(["üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã", "üè¨ –ö–æ–º–º–µ—Ä—Ü–∏—è", "üè† –î–æ–º–∞ –∏ –¥–∞—á–∏"])

    if prefs is not None:
        # --- –ö–≤–∞—Ä—Ç–∏—Ä—ã ---
        with tabs[0]:
            df = pd.read_csv(APARTMENTS_FILE)
            df_filtered = df[
                (df["Rooms"] == prefs["Rooms"]) &
                (df["District"] == prefs["District"]) &
                (df["Area"] >= prefs["MinArea"]) &
                (df["Area"] <= prefs["MaxArea"]) &
                (df["Price"] <= prefs["Income"] * 100) &
                (abs(df["Floor"] - prefs["PreferredFloor"]) <= 1)
            ]
            if not df_filtered.empty:
                st.dataframe(df_filtered[["Title", "Price", "Area", "Floor", "District", "Street"]], use_container_width=True, hide_index=True)
            else:
                st.warning("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # --- –ö–æ–º–º–µ—Ä—Ü–∏—è ---
        with tabs[1]:
            df = pd.read_csv(BUSINESS_FILE)
            df_filtered = filter_properties(df, prefs)
            if not df_filtered.empty:
                st.dataframe(df_filtered[["Title", "Price", "Area", "Floor", "Location"]], use_container_width=True, hide_index=True)
            else:
                st.warning("‚ùå –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # --- –î–æ–º–∞ –∏ –¥–∞—á–∏ ---
        with tabs[2]:
            df = pd.read_csv(HOUSES_FILE)
            df_filtered = filter_properties(df, prefs)
            if not df_filtered.empty:
                st.dataframe(df_filtered[["Title", "Price", "Area", "Floor", "Location"]], use_container_width=True, hide_index=True)
            else:
                st.warning("‚ùå –î–æ–º–æ–≤ –∏ –¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# ====== –ó–ê–ü–£–°–ö ======
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.user_id = None

if st.session_state.logged_in:
    main_app()
else:
    login_page()
